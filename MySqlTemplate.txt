#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;
#endregion

namespace ST_6d198b14647d4076b9169cd96517eb09
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion
        static string dllDir;

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
		{
            // TODO: Add your code here

            //ConnectionManager cm = Dts.Connections["MyTDUser"];
            //System.Data.Odbc.OdbcConnection oConn = (System.Data.Odbc.OdbcConnection)cm.AcquireConnection(Dts.Transaction);

            //if (oConn.State == ConnectionState.Open)

            //{
            //    MessageBox.Show("Message ", "ADO.NET Connection");
            //    oConn.Close();
            //}


            //SqlConnection myADONETConnection =
            //   Dts.Connections["MyTDUser"].AcquireConnection(Dts.Transaction)
            //   as SqlConnection;
            //MessageBox.Show(myADONETConnection.ConnectionString, "ADO.NET Connection");

            dllDir = Dts.Variables["$Package::DllDirectory"].Value.ToString();

            MySqlConnect();


            Dts.TaskResult = (int)ScriptResults.Success;
		}


        //static ScriptMain()
        //{
        //    AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);

        //}

        //static System.Reflection.Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
        //{
        //    if (args.Name.Contains("MySql.Data"))
        //    {
        //        return System.Reflection.Assembly.LoadFile(System.IO.Path.Combine(dllDir, "MySql.Data.dll"));
        //    }

        //    if (args.Name.Contains("MySql.Web"))
        //    {
        //        return System.Reflection.Assembly.LoadFile(System.IO.Path.Combine(dllDir, "MySql.Web.dll"));
        //    }
        //    return null;
        //}
       

        public void MySqlConnect()
        {
            using (var mySqlConnection = new MySqlConnection("server=192.168.43.208;User Id=root;database=fikoli_schema;password=sa@123"))
            {
                // Now that you have your connection, build your query
                var sql = "SELECT * FROM YourTable WHERE YourColumn = @YourParameter";

                // Open your connection
                mySqlConnection.Open();

                // Build your command to execute
                var mySqlCommand = new MySqlCommand(sql, mySqlConnection);

            // Add your parameter
                mySqlCommand.Parameters.AddWithValue("@YourParameter", "Example");

                // Execute your query
                mySqlCommand.ExecuteNonQuery();



                //----------------------------------------------------------------

                string strSQL = "SELECT ID, FirstName, LastName FROM YourTable";
                //Create MySqlDataAdapter object and assign the query and connection to it
                MySqlDataAdapter mydata = new MySqlDataAdapter(strSQL, mySqlConnection);

                DataSet ds = new DataSet();

                //Fill the data from MYSQL DB
                mydata.Fill(ds);




            }
        }



        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}