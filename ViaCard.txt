#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.IO;

#endregion

namespace ST_fb73fc5f5ee3457db7ce11bd279efb9e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            string internalErrorRow = "";
            var filename_2 = (string)Dts.Variables["User::CardDetailListFileSource"].Value;
            ReadCreditCardToDb_2(filename_2, 1, out internalErrorRow);
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion


        private void ReadCreditCardToDb_2(string upload, int startfrom, out string myStrin)
        {
            string line;
            string connectionString = (string)Dts.Variables["$Package::VisaCardRemoteConnString"].Value;
            myStrin = "";

            using (SqlConnection con = new SqlConnection(connectionString))
            {
        

                //datatable
                DataTable table = new DataTable();
                table.Columns.Add(new DataColumn("ACCOUNT_NUMBER"));
                table.Columns.Add(new DataColumn("account_type"));
                table.Columns.Add(new DataColumn("CARD_ID"));
                table.Columns.Add(new DataColumn("CARD_PROGRAM"));
                table.Columns.Add(new DataColumn("EXP_DATE"));
                table.Columns.Add(new DataColumn("seq_nr"));

                //read uploaded file
                using (StreamReader file = new StreamReader(upload))
                {
                    int counter = 0;
                    while ((line = file.ReadLine()) != null)
                    {
                        counter++;
                        //start reading from specify line
                        //stop when next line start with + sign
                        //if (counter >= startfrom && line.Substring(0, 1) != "+")
                        if (counter >= startfrom)
                        {

                            myStrin = counter + ": " + line;
                            string[] fields = line.Split('|');

                            //fields = fields.Skip(1).ToArray();
                            if (fields != null && fields.Length > 5 && (fields[3].StartsWith("Visa") || fields[1].StartsWith("542390") || fields[1].StartsWith("520725")))
                            {

                                var row = table.NewRow();

                                string[] col1 = Regex.Split(fields[0].Trim(), "(\\s)+");

                                if (col1 != null && col1.Length != 3)
                                {
                                    continue;
                                }

                                row["ACCOUNT_NUMBER"] = col1[0];
                                row["account_type"] = "00";
                                row["CARD_ID"] = fields[1].ToString().Trim();
                                row["CARD_PROGRAM"] = fields[3];
                                //31/12/22
                                row["EXP_DATE"] = String.Format("{0:00}{1:00}", fields[5].Substring(6, 2), fields[5].Substring(3, 2)) ;
                                row["seq_nr"] = "0";
                                //row.SetField("ACCOUNT_NUMBER", col1[0]);
                                //row.SetField("account_type", "00");
                                //row.SetField("CARD_ID", fields[1].ToString().Trim());
                                //row.SetField("CARD_PROGRAM", fields[3]);
                                //row.SetField("EXP_DATE", fields[5]);


                                table.Rows.Add(row.ItemArray);
                            }
                        }
                    }
                }


                con.Open();

                //delete from database before inserting fresh records
                //string sql = "TRUNCATE TABLE [CREDIT_CARDS_UPLOAD_TEST]";

                //string sql = "DELETE FROM [" + Dts.Variables["$Package::VisaCardRemoteTableName"].Value + "]";
                string sql = "TRUNCATE TABLE [" + Dts.Variables["$Package::VisaCardRemoteTableName"].Value + "]";
                SqlCommand deletecmd = new SqlCommand(sql, con);
                deletecmd.ExecuteNonQuery();


                // Bulk Copy to SQL Server
                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))
                {
                    bulkCopy.DestinationTableName = (string)Dts.Variables["$Package::VisaCardRemoteTableName"].Value;

                    bulkCopy.ColumnMappings.Add("ACCOUNT_NUMBER", "account_id");
                    bulkCopy.ColumnMappings.Add("account_type", "account_type");
                    bulkCopy.ColumnMappings.Add("CARD_ID", "Pan");
                    bulkCopy.ColumnMappings.Add("CARD_PROGRAM", "card_program");
                    bulkCopy.ColumnMappings.Add("EXP_DATE", "expiry_date");
                    bulkCopy.ColumnMappings.Add("seq_nr", "seq_nr");

                    //if new table is not empty
                    if (table.Rows.Count > 0)
                    {
                        //bulk insert to db
                        bulkCopy.WriteToServer(table);
                    }
                }

                //update the table
                //string updateQuery = "update " + AppConfig.CreditCardTable() + " set external_account = accountNumber where external_account = '' and len (accountNumber) = 10";
                //SqlCommand updatecmd = new SqlCommand(updateQuery, con);
                //updatecmd.ExecuteNonQuery();

                con.Close();
            }//Ends the using block
        }






    }
}